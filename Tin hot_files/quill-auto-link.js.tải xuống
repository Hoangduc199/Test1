(function() {
    var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var DEFAULT_OPTIONS = {
        paste: true,
        type: true,
        regexp: /https?:\/\/[^\s]+/
    };

    var REGEXP = DEFAULT_OPTIONS.regexp;
    const maxLength = 15;

    function registerTypeListener(quill) {
        quill.keyboard.addBinding({
            collapsed: true,
            key: ' ',
            prefix: REGEXP,
            handler: function () {
                return function (range) {
                    return getLinkByType(quill, range);
                };
            }()
        });
        quill.keyboard.bindings[13].unshift({
            collapsed: true,
            key: 'enter',
            prefix: REGEXP,
            handler: function () {
                return function (range) {
                    return getLinkByType(quill, range);
                };
            }()
        });
    }

    function registerPasteListener(quill) {
        quill.clipboard.addMatcher(Node.TEXT_NODE, function (node, delta) {
            if (typeof node.data !== 'string') {
                return;
            }
            var matches = node.data.match(REGEXP);
            if (matches && matches.length > 0) {
                var ops = [];
                var str = node.data;
                matches.forEach(function (match) {
                    var split = str.split(match);
                    var beforeLink = split.shift();
                    ops.push({insert: beforeLink});
                    ops.push({insert: match, attributes: {link: match}});
                    ops.push({insert: ' '});
                    str = split.join(match);
                });
                ops.push({insert: str});
                delta.ops = ops;
            }

            return delta;
        });
    }

    var getLinkByType = function (quill, range) {
        var url = void 0;
        var listText = [];
        contents = quill.getContents().ops;
        for (i = 0; i < contents.length; i++) {
            if (typeof contents[i].insert === "string" && (typeof contents[i].attributes === "undefined" || typeof contents[i].attributes.link === "undefined")) {
                listText.push(contents[i].insert);
            }
        }
        var text = listText.find(item => item.match(REGEXP) !== null)
        if (!text) {
            return true;
        }
        var match = text.match(REGEXP);
        if (match.length > 1) {
            url = match[match.length - 1];
        } else {
            url = match[0];
        }
        var ops = [];
        if (range.index > url.length) {
            ops.push({retain: range.index - url.length});
        }
        ops.push({'delete': url.length});
        ops.push({insert: url, attributes: {link: url}});
        quill.updateContents({ops: ops}, Quill.sources.USER);

        const u = new URL(url);
        const origin = u.origin;
        const path = u.pathname;
        const cutUrl = origin + (path.length > 1 ? path.substr(0, maxLength) : '') + (path.length > maxLength ? '...' : '');
        quill.setSelection(range.index - url.length + cutUrl.length, 0);

        return true;
    }

    var AutoLinks = function AutoLinks(quill) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, AutoLinks);

        var opts = _extends({}, DEFAULT_OPTIONS, options);

        if (opts.type) {
            registerTypeListener(quill);
        }
        if (opts.paste) {
            registerPasteListener(quill);
        }
    };


    Quill.register('modules/autoLinks', AutoLinks);
})();
